#include<iostream>
#include<cstdlib>
using namespace std;
struct	node {
	int info;
	node *left, *right;
};
typedef node *tree;
int insert_BST(tree &root, int k){
	if(root!=NULL){
		if(root->info==k)	return 0;
		if(root->info>k)	return insert_BST(root->left,k);
		else	return insert_BST(root->right,k);
	}
	else{
		root=new node;
		if(root==NULL)	return -1;
		root->info=k;
		root->left=root->right=NULL;
		return 1;
	}
}
void tao_BST(tree &root){
	int k, n;
	cout <<"Nhap so luong phan tu: "; cin>>n;
	root=NULL;
	for(int i=1;i<=n;i++){
		cin>>k;
		insert_BST(root,k);
	}
}
void LNR(tree root){
	if(root!=NULL){
		LNR(root->left);
		cout <<root->info<<" ";
		LNR(root->right);
	}
}
void NLR(tree root){
	if(root!=NULL){
		cout <<root->info<<" ";
		NLR(root->left);
		NLR(root->right);
	}
}
void LRN(tree root){
	if(root!=NULL){
		LRN(root->left);
		LRN(root->right);
		cout <<root->info<<" ";
	}
}
//tim mot phan tu
tree searchnode1(tree root, int k){
	if(root){
		if(root->info==k)	return root;
		if(root->info>k)	return searchnode1(root->left,k);
		return searchnode1(root->right,k);
	}
	return NULL;
}
tree searchnode2(tree root, int k){
	tree p=root;
	while(p!=NULL){
		if(k==p->info)	return p;
		else
			if(k<p->info)	p=p->left;
			else	p=p->right;
	}
	return NULL;
}
int main(){
	tree root;
	tao_BST(root);
	//LNR(root);
	NLR(root);
	//LRN(root);
	int k;
	cout <<"\nNhap phan tu can tim: "; cin>>k;
	tree result=searchnode1(root, k);
	if(result)	cout <<"\nTim thay: "<<k;
	else	cout <<"Khong tim thay!!!";
	return 0;
}